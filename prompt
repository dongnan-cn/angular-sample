项目初始化与Mock后端
认证与授权
路由与主框架
项目管理
任务管理
用户中心/管理员
优化重构



认证模块（Auth）实现详细步骤
1. 目录与文件结构准备
在 src/app/features/auth/ 下创建目录和文件（如 Login、Register 组件，auth.service.ts 等）。
推荐结构：
Apply to in-memory-da...
2. 创建 AuthService（认证服务）
负责登录、注册、登出、JWT 存储与获取、用户信息管理等。
通过 HttpClient 调用 mock API（如 /users、/authenticate）。
3. 创建 LoginComponent（登录组件）
使用响应式表单（Reactive Forms）。
表单字段：用户名、密码，带校验。
登录成功后保存 JWT 到 localStorage，并跳转到主页面。
4. 创建 RegisterComponent（注册组件）
使用响应式表单。
表单字段：用户名、密码、确认密码，带校验。
注册成功后可自动登录或跳转到登录页。
5. 配置路由
在 app.routes.ts 或相关路由文件中添加 /login、/register 路由。
认证相关组件建议使用独立组件（standalone: true）。
6. 实现 AuthGuard（路由守卫）
用于保护需要登录才能访问的路由。
检查 localStorage 中是否有有效 JWT。
7. 实现 AuthInterceptor（HTTP 拦截器）
自动为所有需要认证的 HTTP 请求添加 Authorization 头（携带 JWT）。
8. 用户角色与权限控制（可选，后续扩展）
在 AuthService 中管理当前用户角色。
在路由守卫或组件中根据角色控制页面访问权限。
9. 退出登录功能
清除 localStorage 中的 JWT，并跳转到登录页。
10. UI 细节与用户体验优化
登录/注册失败时显示错误提示。
登录状态下显示用户信息及退出按钮。